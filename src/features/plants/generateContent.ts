// src/features/plants/generateContent.ts

import { generateTextFromGemini, GenerateGeminiTextOptions } from '../ai/geminiService';
import {Bindings} from "hono/dist/types/types";

/**
 * Gera o conte√∫do principal (artigo) sobre como cultivar uma planta,
 * utilizando a API Gemini e seguindo uma estrutura espec√≠fica.
 * @param env Os bindings do ambiente Cloudflare (contendo GEMINI_API_KEY).
 * @param plantName O nome da planta.
 * @param plantTitle O t√≠tulo fornecido para a planta (pode ser usado para contexto).
 * @param language O idioma para a gera√ß√£o do conte√∫do (ex: 'pt_BR', 'en_US').
 * @returns Uma string com o conte√∫do gerado ou null em caso de falha.
 */
export async function generatePlantCultivationContent(
    env: Bindings,
    plantName: string,
    plantTitle: string | null,
    language: string
): Promise<string | null> {
    const targetLanguage = language.toLowerCase().startsWith('pt') ? 'portugu√™s do Brasil' : 'ingl√™s';

    // O prompt √© baseado no seu exemplo, com as vari√°veis interpoladas.
    const prompt = `
Crie um artigo informativo e pr√°tico ensinando como plantar e cuidar da planta "${plantName}", cujo t√≠tulo principal para contexto √© "${plantTitle || plantName}".
Siga ESTRITAMENTE a seguinte estrutura de se√ß√µes e formato:

üå± Como Plantar ${plantName}
[Escreva um par√°grafo claro e detalhado explicando o processo de plantio desta esp√©cie. Inclua informa√ß√µes sobre sementes/mudas, profundidade, espa√ßamento e primeiros cuidados.]

üî¨ Nome Cient√≠fico
[Informe o nome cient√≠fico (g√™nero e esp√©cie) mais comum para "${plantName}". Se houver muitas variedades ou incerteza, mencione isso brevemente ou indique o g√™nero principal (ex: Rosa spp.). Se n√£o encontrar informa√ß√£o confi√°vel, escreva apenas "Informa√ß√£o n√£o dispon√≠vel.".]

üå§Ô∏è Clima Ideal
[Descreva detalhadamente as condi√ß√µes clim√°ticas ideais: faixa de temperatura preferida, toler√¢ncia ao frio/calor, necessidade de umidade atmosf√©rica e adequa√ß√£o a climas espec√≠ficos (tropical, temperado, etc.).]

üå± Tipo de Solo
[Detalhe o tipo de solo perfeito para "${plantName}". Inclua informa√ß√µes sobre drenagem (essencial!), pH ideal, textura (arenoso, argiloso, etc.) e recomenda√ß√£o de mistura ou como preparar o solo existente.]

üíß Rega
[Forne√ßa instru√ß√µes precisas sobre a rega: frequ√™ncia (considerando esta√ß√µes do ano e fase da planta), quantidade de √°gua, melhor m√©todo (direto no solo, evitar molhar folhas?), e a import√¢ncia de verificar a umidade do solo antes de regar novamente.]

‚òÄÔ∏è Luz
[Explique a exig√™ncia de luz solar: quantas horas de sol direto por dia s√£o necess√°rias (ou se prefere luz indireta), qual a intensidade ideal (sol da manh√£, sol pleno, meia-sombra), e os riscos de luz insuficiente ou excessiva.]

‚ú® Dicas Extras de Cultivo
[Ofere√ßa 2-3 dicas adicionais valiosas e pr√°ticas. Podem incluir: aduba√ß√£o (tipo, frequ√™ncia), poda (quando, como), propaga√ß√£o (m√©todos f√°ceis), preven√ß√£o/controle de pragas e doen√ßas comuns, ou outros cuidados espec√≠ficos relevantes para "${plantName}".]

REGRAS DE FORMATA√á√ÉO ABSOLUTAMENTE OBRIGAT√ìRIAS:
1. Use EXATAMENTE os t√≠tulos de se√ß√£o fornecidos acima, incluindo os emojis e o nome da planta onde indicado.
2. Separe CADA se√ß√£o (t√≠tulo + par√°grafo(s) da se√ß√£o) da pr√≥xima por EXATAMENTE duas quebras de linha (ENTER duplo: \\n\\n).
3. Escreva TODO o conte√∫do em texto puro. N√ÉO use NENHUM HTML, Markdown (sem **, _, *, -, #, 1.), bullet points ou numera√ß√£o. Apenas par√°grafos de texto simples.
4. N√ÉO inclua um t√≠tulo geral no in√≠cio do artigo, nem introdu√ß√£o ou conclus√£o/despedida no final. Comece diretamente com a primeira se√ß√£o e termine ap√≥s a √∫ltima.
5. Escreva todo o texto em ${targetLanguage}, usando linguagem clara, objetiva e acess√≠vel, mesmo ao abordar termos t√©cnicos.
`.trim();

    const options: GenerateGeminiTextOptions = {
        prompt: prompt,
        // Voc√™ pode querer ajustar a configuration de gera√ß√£o para este tipo de conte√∫do.
        // Artigos detalhados podem precisar de mais tokens.
        generationConfig: {
            temperature: 0.6, // Um pouco menos criativo para conte√∫do mais factual.
            maxOutputTokens: 3500, // Aumentado para permitir um artigo bem detalhado. Ajuste conforme testes.
            // topP: 0.95, // Exemplo
            // topK: 40,   // Exemplo
        }
    };

    try {
        console.log(`[generateContent] Gerando conte√∫do para "${plantName}" em ${targetLanguage}. T√≠tulo de contexto: "${plantTitle || plantName}"`);
        const generatedArticle = await generateTextFromGemini(env, options);
        if (generatedArticle) {
            console.log(`[generateContent] Conte√∫do para "${plantName}" gerado com sucesso.`);
            // Poder√≠amos adicionar uma verifica√ß√£o extra aqui para garantir que as se√ß√µes principais est√£o presentes,
            // mas isso adicionaria complexidade. Por enquanto, confiamos no prompt.
            return generatedArticle;
        } else {
            console.warn(`[generateContent] A gera√ß√£o de conte√∫do para "${plantName}" retornou nulo ou vazio.`);
            return null;
        }
    } catch (error) {
        console.error(`[generateContent] Erro ao gerar conte√∫do para "${plantName}":`, error);
        // Retornar null ou relan√ßar o erro, dependendo de como voc√™ quer tratar na camada de servi√ßo.
        return null;
    }
}